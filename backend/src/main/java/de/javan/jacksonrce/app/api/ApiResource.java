package de.javan.jacksonrce.app.api;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.util.Base64;

import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.CrossOrigin;

import com.fasterxml.jackson.databind.ObjectMapper;

import de.javan.jacksonrce.models.Book;

@XmlAccessorType(XmlAccessType.NONE)
@Path("")
@Service
@CrossOrigin
public class ApiResource implements InitializingBean {

    @GET
    @Path("/test")
    @Produces(MediaType.TEXT_PLAIN)
    public String test() {
        return "Hello world!";
    }
    
    @POST
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/files/upload")
    public Response uploadFile(@FormDataParam("file") InputStream file,
            @FormDataParam("file") FormDataContentDisposition fileDetail) {
    	
		ObjectMapper mapper = new ObjectMapper();
		mapper.enableDefaultTyping();
		
		try {
			Inner i = mapper.readValue(file, Inner.class);
			// do something with the JSON file
			return Response.ok(i).build();
			
		} catch (IOException e) {
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), e.toString()).build();
		}
		
    }
    
    @POST
    @Path("/list")
    @Produces(MediaType.APPLICATION_JSON)
    public Response appendList(String newList) {
    	//newList: {\"age\":33,\"messages\":[\"msg 1\",\"msg 2\"],\"name\":\"mkyong\"}
    	
    	ObjectMapper mapper = new ObjectMapper();
		mapper.enableDefaultTyping();
		
		try {
			// Convert JSON string to Object
			Inner i = mapper.readValue(newList, Inner.class);
			return Response.ok(i).build();
			
		} catch (IOException e) {
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), e.toString()).build();
		}
		
    }
    
    @POST
    @Path("/users")
    @Produces(MediaType.APPLICATION_JSON)
    public Response saveUser(Object obj) {

    	ObjectMapper mapper = new ObjectMapper();
		mapper.enableDefaultTyping();
		
		try {
			System.out.println(obj);
			// Convert Object to JSON string
			String jsonInString = mapper.writeValueAsString(obj);
			System.out.println(jsonInString);
			
			User u = mapper.readValue(jsonInString, User.class);
			return Response.ok(u).build();
			
		} catch (IOException e) {
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), e.toString()).build();
		}
		
    }
    
	@GET
    @Path("/book/{id}")
	@Produces(MediaType.TEXT_PLAIN)
    public Response serializeBook(@PathParam("id") int bookId) {
        // Serialization
    	Book b1 = new Book(bookId, "123-456-789", "Graph Theory", "PHI", "ND");
    	try {
    		byte[] b1ByteArray = Book.serialize(b1);
    		String b1Base64String = Base64.getEncoder().encodeToString(b1ByteArray);
			return Response.ok(b1Base64String).build();
    	} catch (IOException e) {
    		System.out.println(e.toString());
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), e.toString()).build();
		}
        
    }
    
    @PUT
    @Path("/book")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public Response deserializeBook(@PathParam("path") String path,
            @DefaultValue("-1") @QueryParam("version") String versionParam,
            @DefaultValue("false") @QueryParam("null") String setNull,
            @Context UriInfo ui, byte[] data) throws IOException, ClassNotFoundException {
    	
    	// Byte Array to Base64 String
    	String dataBase64 = Base64.getEncoder().encodeToString(data);
    	System.out.println(dataBase64);
    	
    	// Byte Array to Object
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        ObjectInput in = new ObjectInputStream(bis);
        Book b2 = (Book) in.readObject();
        
		return Response.ok(b2).build();
    }

    @Override
    public void afterPropertiesSet() throws Exception {

    }
}

class Inner {
	public int id;
	public Object obj;
}

class User {
	public String name;
	public Object phone;
}
