package de.javan.jacksonrce.models;

import java.io.*;
import java.util.Base64;

public class Book implements Externalizable {
	
	private int bookId;
	private String isbn;
	private String title;
	private String publisher;
	private String author;
	
	public Book() {}
	public Book(int bookId, String isbn, String title, String publisher, String author) {
		this.bookId = bookId;
		this.isbn = isbn;
		this.title = title;
		this.publisher = publisher;
		this.author = author;
	}
	public int getBookId(){
	   return bookId;
	}
	public void setBookId(int bookId){
		this.bookId=bookId;
	}
	public String getIsbn(){
	   return isbn;
	}
	public void setIsbn(String isbn){
		this.isbn=isbn;
	}
	public String getTitle(){
	   return title;
	}
	public void setTitle(String title){
		this.title=title;
	}
	public String getPublisher(){
	   return publisher;
	}
	public void setPublisher(String publisher){
		this.publisher=publisher;
	}
	public String getAuthor(){
	   return author;
	}
	public void setAuthor(String author){
		this.author=author;
	}

	@Override
	public void writeExternal(ObjectOutput out)
	throws IOException {
		out.writeInt(getBookId());
		out.writeObject(getIsbn());
		out.writeObject(getTitle());
		out.writeObject(getPublisher());
		out.writeObject(getAuthor());
   }

	@Override
	public void readExternal(ObjectInput in)
	throws IOException, ClassNotFoundException {
		setBookId(in.readInt());
		setIsbn(in.readObject().toString());
		setTitle(in.readObject().toString());
		setPublisher(in.readObject().toString());
		setAuthor(in.readObject().toString());
	}

	@Override
	public String toString() {
		return "Book [bookId=" + bookId + ", isbn="
				+ isbn + ", title=" + title + ", publisher="
				+ publisher + ", author=" + author + "]";
   }
	
	public static byte[] serialize(Object object) throws IOException {
	  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
	  ObjectOutputStream objectOutputStream=new ObjectOutputStream(bytes);
	  objectOutputStream.writeObject(object);
	  objectOutputStream.flush();
	  objectOutputStream.close();
	  return bytes.toByteArray();
	}
	
	public static Object deserialize(String fileName) throws IOException, ClassNotFoundException { 
		FileInputStream fis = new FileInputStream(fileName); 
		BufferedInputStream bis = new BufferedInputStream(fis); 
		ObjectInputStream ois = new ObjectInputStream(bis); 
		Object obj = ois.readObject(); 
		ois.close(); 
		return obj; 
	} 
	
	public static void serialize(Object obj, String fileName) throws IOException { 
		FileOutputStream fos = new FileOutputStream(fileName); 
		BufferedOutputStream bos = new BufferedOutputStream(fos); 
		ObjectOutputStream oos = new ObjectOutputStream(bos); 
		oos.writeObject(obj); 
		oos.close(); 
	}
	
	public static String convertToByteString(Object object) throws IOException {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutput out = new ObjectOutputStream(bos)) {
            out.writeObject(object);
            final byte[] byteArray = bos.toByteArray();
            return Base64.getEncoder().encodeToString(byteArray);
        }
    }

	public static Object convertFromByteString(String byteString) throws IOException, ClassNotFoundException {
        final byte[] bytes = Base64.getDecoder().decode(byteString);
        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes); ObjectInput in = new ObjectInputStream(bis)) {
            return in.readObject();
        }
    }
}